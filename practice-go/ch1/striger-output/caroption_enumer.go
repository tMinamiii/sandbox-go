// Code generated by "enumer -type=CarOption -json"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const (
	_CarOptionName_0 = "GPSAWD"
	_CarOptionName_1 = "SunRoof"
	_CarOptionName_2 = "HeatedSeat"
	_CarOptionName_3 = "DriverAssist"
)

var (
	_CarOptionIndex_0 = [...]uint8{0, 3, 6}
	_CarOptionIndex_1 = [...]uint8{0, 7}
	_CarOptionIndex_2 = [...]uint8{0, 10}
	_CarOptionIndex_3 = [...]uint8{0, 12}
)

func (i CarOption) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CarOptionName_0[_CarOptionIndex_0[i]:_CarOptionIndex_0[i+1]]
	case i == 4:
		return _CarOptionName_1
	case i == 8:
		return _CarOptionName_2
	case i == 16:
		return _CarOptionName_3
	default:
		return fmt.Sprintf("CarOption(%d)", i)
	}
}

var _CarOptionValues = []CarOption{1, 2, 4, 8, 16}

var _CarOptionNameToValueMap = map[string]CarOption{
	_CarOptionName_0[0:3]:  1,
	_CarOptionName_0[3:6]:  2,
	_CarOptionName_1[0:7]:  4,
	_CarOptionName_2[0:10]: 8,
	_CarOptionName_3[0:12]: 16,
}

// CarOptionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CarOptionString(s string) (CarOption, error) {
	if val, ok := _CarOptionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CarOption values", s)
}

// CarOptionValues returns all values of the enum
func CarOptionValues() []CarOption {
	return _CarOptionValues
}

// IsACarOption returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CarOption) IsACarOption() bool {
	for _, v := range _CarOptionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CarOption
func (i CarOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CarOption
func (i *CarOption) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CarOption should be a string, got %s", data)
	}

	var err error
	*i, err = CarOptionString(s)
	return err
}
