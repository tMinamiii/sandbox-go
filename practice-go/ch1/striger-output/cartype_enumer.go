// Code generated by "enumer -type=CarType -json"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _CarTypeName = "SedanHatchbackMPVSUVCrossoverCoupeConvertible"

var _CarTypeIndex = [...]uint8{0, 5, 14, 17, 20, 29, 34, 45}

func (i CarType) String() string {
	i -= 1
	if i < 0 || i >= CarType(len(_CarTypeIndex)-1) {
		return fmt.Sprintf("CarType(%d)", i+1)
	}
	return _CarTypeName[_CarTypeIndex[i]:_CarTypeIndex[i+1]]
}

var _CarTypeValues = []CarType{1, 2, 3, 4, 5, 6, 7}

var _CarTypeNameToValueMap = map[string]CarType{
	_CarTypeName[0:5]:   1,
	_CarTypeName[5:14]:  2,
	_CarTypeName[14:17]: 3,
	_CarTypeName[17:20]: 4,
	_CarTypeName[20:29]: 5,
	_CarTypeName[29:34]: 6,
	_CarTypeName[34:45]: 7,
}

// CarTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CarTypeString(s string) (CarType, error) {
	if val, ok := _CarTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CarType values", s)
}

// CarTypeValues returns all values of the enum
func CarTypeValues() []CarType {
	return _CarTypeValues
}

// IsACarType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CarType) IsACarType() bool {
	for _, v := range _CarTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CarType
func (i CarType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CarType
func (i *CarType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CarType should be a string, got %s", data)
	}

	var err error
	*i, err = CarTypeString(s)
	return err
}
