// Code generated by MockGen. DO NOT EDIT.
// Source: arithmetic.go

// Package sgomock is a generated GoMock package.
package sgomock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArithmetic is a mock of Arithmetic interface
type MockArithmetic struct {
	ctrl     *gomock.Controller
	recorder *MockArithmeticMockRecorder
}

// MockArithmeticMockRecorder is the mock recorder for MockArithmetic
type MockArithmeticMockRecorder struct {
	mock *MockArithmetic
}

// NewMockArithmetic creates a new mock instance
func NewMockArithmetic(ctrl *gomock.Controller) *MockArithmetic {
	mock := &MockArithmetic{ctrl: ctrl}
	mock.recorder = &MockArithmeticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArithmetic) EXPECT() *MockArithmeticMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockArithmetic) Add(x, y int64) int64 {
	ret := m.ctrl.Call(m, "Add", x, y)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockArithmeticMockRecorder) Add(x, y interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockArithmetic)(nil).Add), x, y)
}

// Sub mocks base method
func (m *MockArithmetic) Sub(x, y int64) int64 {
	ret := m.ctrl.Call(m, "Sub", x, y)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Sub indicates an expected call of Sub
func (mr *MockArithmeticMockRecorder) Sub(x, y interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockArithmetic)(nil).Sub), x, y)
}

// Mul mocks base method
func (m *MockArithmetic) Mul(x, y int64) int64 {
	ret := m.ctrl.Call(m, "Mul", x, y)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Mul indicates an expected call of Mul
func (mr *MockArithmeticMockRecorder) Mul(x, y interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mul", reflect.TypeOf((*MockArithmetic)(nil).Mul), x, y)
}

// Div mocks base method
func (m *MockArithmetic) Div(x, y int64) int64 {
	ret := m.ctrl.Call(m, "Div", x, y)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Div indicates an expected call of Div
func (mr *MockArithmeticMockRecorder) Div(x, y interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Div", reflect.TypeOf((*MockArithmetic)(nil).Div), x, y)
}
